name: Deploy bot to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Check contents of tg-bot folder
      run: |
        cd tg-bot
        ls

    - name: Build and push Docker image
      run: |
        cd tg-bot
        ls
        docker build --build-arg MONGODB_TOKEN=${{ secrets.MONGODB_TOKEN }} -t my-telegram-bot .
        docker tag my-telegram-bot:latest ${{ secrets.DOCKER_USERNAME }}/my-telegram-bot:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/my-telegram-bot:latest

    - name: Deploy to EC2
      env:
        MONGODB_TOKEN: ${{ secrets.MONGODB_TOKEN }}
        TG_TOKEN: ${{ secrets.TG_TOKEN }}
      run: |
        # Записуємо вміст SSH ключа у файл
        echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem
        
        # Підключаємося до EC2 та запускаємо Docker контейнер
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-telegram-bot:latest
          docker stop my-telegram-bot || true
          docker rm my-telegram-bot || true
          docker run -d --name my-telegram-bot --env MONGODB_TOKEN=$MONGODB_TOKEN --env TG_TOKEN=$TG_TOKEN ${{ secrets.DOCKER_USERNAME }}/my-telegram-bot:latest
        EOF
        
        # Видаляємо файл з SSH ключем
        rm ec2_key.pem
